services:
  # Device Connector Service
  device_connector:
    build:
      context: ./device_connector
    ports:
      - "8082:8082"
    volumes:
      - ./device_connector:/app
    networks:
      - gym-genius-network
    depends_on:
      - service_catalog
      - resource_catalog

  # Resource Catalog
  resource_catalog:
    build:
      context: ./resource_catalog
    ports:
      - "8081:8081"
    volumes:
      - ./resource_catalog:/app
    networks:
      - gym-genius-network

  # Service Catalog
  service_catalog:
    build:
      context: ./service_catalog
    ports:
      - "8080:8080"
    volumes:
      - ./service_catalog:/app
    networks:
      - gym-genius-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://service_catalog:8080/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Temperature Optimization Service
  temperature_optimization:
    build:
      context: ./Temperature_optimization_and_energy_efficiency
    volumes:
      - ./Temperature_optimization_and_energy_efficiency:/app
    networks:
      - gym-genius-network
    depends_on:
      - device_connector
      - service_catalog
      - resource_catalog
    environment:
      - SERVICE_CATALOG_URL=http://service_catalog:8080

  # Occupancy Monitoring Service
  occupancy:
    build:
      context: ./Occupancy_monitoring_and_access_control
    volumes:
      - ./Occupancy_monitoring_and_access_control:/app
    networks:
      - gym-genius-network
    depends_on:
      - device_connector
      - service_catalog
      - resource_catalog
      - thingspeak_adaptor
      - thingspeak_reader
    environment:
      - THINGSPEAK_URL=http://thingspeak_adaptor:8089/thingspeak_adaptor/?channel=entrance
      - SERVICE_CATALOG_URL=http://service_catalog:8080
    restart: always

  # Machine Availability Service
  machine_availability:
    build:
      context: ./Machine_availability
    volumes:
      - ./Machine_availability:/app
    networks:
      - gym-genius-network
    depends_on:
      - device_connector
      - service_catalog
      - resource_catalog
    environment:
      - SERVICE_CATALOG_URL=http://service_catalog:8080

  # # Button Sensor (real and simulated)
  # button_sensor:
  #   build:
  #     context: ./device_connector/sensors
  #   command: python button_class.py
  #   volumes:
  #     - ./device_connector/sensors:/app
  #   networks:
  #     - gym-genius-network
  #   depends_on:
  #     - device_connector

  # # DHT11 Sensor (real and simulated)
  # dht11_sensor:
  #   build:
  #     context: ./device_connector/sensors
  #   command: python dht11_class.py
  #   volumes:
  #     - ./device_connector/sensors:/app
  #   networks:
  #     - gym-genius-network
  #   depends_on:
  #     - device_connector

  # # PIR Sensor (real and simulated)
  # pir_sensor:
  #   build:
  #     context: ./device_connector/sensors
  #   command: python PIR_class.py
  #   volumes:
  #     - ./device_connector/sensors:/app
  #   networks:
  #     - gym-genius-network
  #   depends_on:
  #     - device_connector

  # Thingspeak Adaptor Service
  thingspeak_adaptor:
    build:
      context: ./ThingSpeak  
    volumes:
      - ./ThingSpeak:/app
    networks:
      - gym-genius-network
    depends_on:
      - device_connector
      - service_catalog
      - resource_catalog
    environment:
      - SERVICE_CATALOG_URL=http://service_catalog:8080
    command: python TA.py

  # Thingspeak Reader Service
  thingspeak_reader:
    build:
      context: ./thingspeak_reader
    volumes:
      - ./thingspeak_reader:/app
    ports:
      - "8089:8089"  # La porta per accedere al server HTTP di TA.py (se necessario)
    networks:
      - gym-genius-network
    depends_on:
      - device_connector
      - thingspeak_adaptor
      - service_catalog
      - resource_catalog
    command: python TA_reader.py


  # Telegram Bot Service
  # telegram_bot:
  #   build:
  #     context: ./telegramBot  # Path to the Dockerfile in telegramBot directory
  #   ports:
  #     - "8086:8086"
  #   volumes:
  #     - ./telegramBot:/app
  #   networks:
  #     - gym-genius-network
  #   depends_on:
  #     - device_connector

  # # Button Sensor (real and simulated)
  # button_sensor:
  #   build:
  #     context: C:\Users\feder\OneDrive\Desktop\Uni\IoT\Gym_Genius\device_connector\sensors  # Path to the Dockerfile in sensors directory
  #   command: python button.py  # Command to run the button.py script
  #   volumes:
  #     - ./sensors:/app  # Mount the local sensors folder to the container
  #   networks:
  #     - gym-genius-network
  #   depends_on:
  #     - device_connector
  #   # Test with raspberry
  #   # devices:
  #   #   - "/dev/mem:/dev/mem"  # Needed for GPIO access on Raspberry Pi

  # # DHT11 Sensor (real and simulated)
  # dht11_sensor:
  #   build:
  #     context: C:\Users\feder\OneDrive\Desktop\Uni\IoT\Gym_Genius\device_connector\sensors  # Path to the Dockerfile in sensors directory
  #   command: python dht11.py  # Command to run the dht11.py script
  #   volumes:
  #     - ./sensors:/app  # Mount the local sensors folder to the container
  #   networks:
  #     - gym-genius-network
  #   depends_on:
  #     - device_connector
  #   # Test with raspberry
  #   # devices:
  #   #   - "/dev/mem:/dev/mem"  # Needed for GPIO access on Raspberry Pi

  # # PIR Sensor (real and simulated)
  # pir_sensor:
  #   build:
  #     context: C:\Users\feder\OneDrive\Desktop\Uni\IoT\Gym_Genius\device_connector\sensors  # Path to the Dockerfile in sensors directory
  #   command: python PIR_sensor.py  # Command to run the PIR_sensor.py script
  #   volumes:
  #     - ./sensors:/app  # Mount the local sensors folder to the container
  #   networks:
  #     - gym-genius-network
  #   depends_on:
  #     - device_connector
  #   # Test with raspberry
  #   # devices:
  #   #   - "/dev/mem:/dev/mem"  # Needed for GPIO access on Raspberry Pi

networks:
  gym-genius-network:
    name: gym-genius-network
    driver: bridge
